// Generated by CoffeeScript 1.6.3
(function() {
  var config, fs, logDate, logger, loglimit, request;

  request = require('request');

  fs = require('fs');

  config = JSON.parse(fs.readFileSync(__dirname + '/config.json', {
    encoding: 'utf8'
  }));

  logger = function(err) {
    return fs.appendFileSync(__dirname + '/log.txt', '\n' + JSON.stringify(err, false, 2) + '\n');
  };

  loglimit = 30;

  logDate = new Date(config.lastLogClean);

  logDate.setDate(logDate.getDate() + 30);

  if (Date.now() > logDate) {
    config.lastLogClean = Date.now();
    fs.writeFileSync(__dirname + '/log.txt', '');
    fs.writeFileSync(__dirname + '/config.json', JSON.stringify(config, false, 2));
    logger('Cleaned logs on ' + config.lastLogClean);
  }

  request('http://icanhazip.com', function(err, res, theIP) {
    var IPRegex;
    if (err) {
      logger(err);
      return;
    }
    IPRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    theIP = theIP.trim();
    if (IPRegex.test(theIP) === false) {
      logger('icanhazip did not return a valid IP address.');
      return;
    }
    if (theIP === config.currentIP) {
      logger('IP is still the same at ' + Date.now());
      return;
    }
    config.currentIP = theIP;
    fs.writeFileSync(__dirname + '/config.json', JSON.stringify(config, false, 2));
    return config.domains.forEach(function(d, index, arr) {
      return request({
        url: 'https://dnsimple.com/domains/' + d.domain + '/records/' + d.record,
        method: 'PUT',
        headers: {
          'X-DNSimple-Domain-Token': d.token,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        json: {
          record: {
            content: theIP
          }
        }
      }, function(err, res, resBody) {
        if (err) {
          logger('Failed to update dnsimple.');
        }
        return console.log('Updated ' + d.domain + ' successfully.');
      });
    });
  });

}).call(this);
